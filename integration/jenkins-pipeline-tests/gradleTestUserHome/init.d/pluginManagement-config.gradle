Properties props = new Properties()
File gradleProperties = new File(getGradleUserHomeDir(),"gradle.properties")
gradleProperties.withInputStream {
    props.load(it)
}

settingsEvaluated { settings ->
    settings.pluginManagement {
        resolutionStrategy {
            eachPlugin {
                if (requested.id.id == "com.apgsga.rpm.package") {
                    useModule("com.apgsga.gradle:rpm-service-packager:1.1-SNAPSHOT")
                } else if (requested.id.id == "com.apgsga.zip.package") {
                    useModule("com.apgsga.gradle:zip-service-packager:1.1-SNAPSHOT")
                } else if (requested.id.id == "com.apgsga.publish") {
                    useModule("com.apgsga.gradle:generic-publish:1.1-SNAPSHOT")
                } else if (requested.id.id == "com.apgsga.common.repo") {
                    useModule("com.apgsga.gradle:repo-config:1.1-SNAPSHOT")
                } else if (requested.id.id == "com.apgsga.rpm.ssh.deployer") {
                    useModule("com.apgsga.gradle:rpm-ssh-deployer:1.1-SNAPSHOT")
                }else if (requested.id.id == "com.apgsga.gui.package") {
                    useModule("com.apgsga.gradle:it21-gui-packager:1.1-SNAPSHOT")
                } else if (requested.id.id == "com.apgsga.version.resolver") {
                      useModule("com.apgsga.gradle:version-manager:1.1-SNAPSHOT")
           	} 
	    }
        }
        repositories {
            mavenLocal()
            gradlePluginPortal()
            maven {
                url "${props.mavenRepoBaseUrl}/${props.mavenRepoName}"
                credentials {
                    username props.mavenRepoUser
                    password props.mavenRepoPwd
                }
            }
        }
    }
}
