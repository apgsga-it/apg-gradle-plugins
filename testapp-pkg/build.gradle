buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath 'com.apgsga.gradle:rpm-packager:0.3-SNAPSHOT'
		classpath 'com.apgsga.gradle:generic-publish:0.1'
		classpath 'org.hidetake:gradle-ssh-plugin:2.10.1'
		classpath 'nu.studer:gradle-credentials-plugin:1.0.7'
	}
}

apply plugin: 'com.apgsga.rpm.package'
apply plugin: 'com.apgsga.publish'
apply plugin: 'org.hidetake.ssh'
apply plugin: 'nu.studer.credentials'

project.ext {
	serviceName = project.hasProperty('serviceName') ? project.property('serviceName') : "echoservice"
	targetHost = project.hasProperty('targetHost') ? project.property('targetHost') : "jadas-e.apgsga.ch"
	sshUser = project.hasProperty('sshUser') ? project.hasProperty('sshUser') : credentials.deployUser
	sshPw = project.hasProperty('sshPw') ? project.hasProperty('sshPw') : credentials.deployUserPassword
	installTarget = project.hasProperty('installTarget') ? project.property('installTarget') : "CHEI212"
    serviceVersion = project.hasProperty('serviceVersion') ? project.property('serviceVersion') : "1.0"
	releaseNr = project.hasProperty('releaseNr') ? project.property('releaseNr') : "2"
}
println "serviceName = ${project.ext.serviceName}"
println "targetHost = ${project.ext.targetHost}"
println "installTarget = ${project.ext.installTarget}"
println "serviceVersion = ${project.ext.serviceVersion}"


// TODO (che, 2.10) support repositories alligned to common-repo
repositories {
	mavenLocal()
}

apgRpmPackage {
	serviceName = project.ext.serviceName
	// TODO (che,15.10) jadas-e services
	supportedServices = [project.ext.serviceName ]
	dependencies = [
		"com.apgsga:testapp-service:0.1-SNAPSHOT"
	]
	resourceFilters = "serviceport"
	appConfigFilters = "general"
  	servicePropertiesDir = "resources"
	installTarget = project.ext.installTarget
	mainProgramName  = "com.apgsga.testapp.TestappApplication"
	version = project.ext.serviceVersion 
	releaseNr = project.ext.releaseNr
}

apgRpmPackage.log()

apgGenericPublishConfig {
	artefactFile =  file ("${buildDir}/distributions/${apgRpmPackage.archiveName}")
	local()
}

apgGenericPublishConfig.log()

remotes {
	dev {
	  knownHosts = allowAnyHosts
	  host = project.ext.targetHost
	  user = project.ext.sshUser
	  password = project.ext.sshPw
	}
}

task deployRpm {
	doLast {
		ssh.run {
		  session(remotes.dev) {
			  put from: file("${buildDir}/distributions/${apgRpmPackage.archiveName}"), into: 'downloads'
			  execute('ls -la downloads') { result ->
				  println result
				}
			  def result = executeSudo 'rpm -qa | grep apg' , pty: true
			  println result
			  
			  //result = executeSudo "rpm -Uvh downloads/${apgRpmPackage.archiveName}" , pty: true
			  //println result
		  }
		}
	}
}

