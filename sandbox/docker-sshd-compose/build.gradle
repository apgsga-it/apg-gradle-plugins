plugins {

    id 'com.bmuschko.docker-remote-api' version '6.1.3'
    id 'java'
}
// Import task types
import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.network.*
import com.bmuschko.gradle.docker.tasks.AbstractDockerRemoteApiTask

// Use task types
task buildSshdImage(type: DockerBuildImage) {
    inputDir = file('./')
    images.add('sshtest:latest')
    noCache = false
    pull = false
}

task createSshdTestNetwork(type: DockerCreateNetwork) {
    dependsOn buildSshdImage
    networkId = "sshdtest"
}

task removeSshdTestNetwork(type: DockerRemoveNetwork) {
    networkId = "sshdtest"
}


task createSshdServer1(type: DockerCreateContainer) {
    dependsOn createSshdTestNetwork
    containerName = "sshdServer1"
    targetImageId buildSshdImage.getImageId()
    hostConfig.portBindings = ['2201:22']
    hostConfig.autoRemove = true
    hostConfig.network = "sshdtest"
    hostConfig.privileged = true

}

task createSshdServer2(type: DockerCreateContainer) {
    dependsOn createSshdTestNetwork
    containerName = "sshdServer2"
    targetImageId buildSshdImage.getImageId()
    hostConfig.portBindings = ['2202:22']
    hostConfig.autoRemove = true
    hostConfig.network = "sshdtest"
    hostConfig.privileged = true

}

task startSshdServer1(type: DockerStartContainer) {
    dependsOn createSshdServer1
    targetContainerId createSshdServer1.getContainerId()

}

task startSshdServer2(type: DockerStartContainer) {
    dependsOn createSshdServer2
    targetContainerId createSshdServer2.getContainerId()

}

task runSshdServers {
    dependsOn startSshdServer1
    dependsOn startSshdServer2
}

task cleanupDocker(type: DockerCleanup) {
    containerNames = 'sshdServer1:sshdServer2'
    networkNames = 'sshdtest'
}

class DockerCleanup extends AbstractDockerRemoteApiTask {
    @Input
    final Property<String> containerNames = project.objects.property(String)

    @Input
    final Property<String> networkNames = project.objects.property(String)


    @Override
    void runRemoteCommand() {
        def containersList = containerNames.get().split(":") as Collection
        project.logger.info("Container Filter: ${containersList.toString()}")
        def containers = dockerClient.listContainersCmd()
                .withNameFilter(containersList)
                .exec()
        for (container in containers) {
            project.logger.info("Stopping constainer: ${container.toString()} with Id: ${container.getId()} ")
            dockerClient.stopContainerCmd(container.getId()).exec()
            project.logger.info("Stopped constainer: ${container.toString()}")
        }
        def networksList = networkNames.get().split(":")
        project.logger.info("Network Filter: ${networksList.toString()}")
        def networks = dockerClient.listNetworksCmd()
                .withNameFilter(networksList)
                .exec()
        for (network in networks) {
            project.logger.info("Removing network: ${network.toString()} with Id:  ${network.getId()}")
            dockerClient.removeNetworkCmd(network.getId()).exec()
        }

    }
}



